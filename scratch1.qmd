---
jupyter:
  jupytext:
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.16.6
  kernelspec:
    display_name: IV Dist Dash
    language: python
    name: iv_dist_dash
---

```{python}
import jax
import jax.numpy as jnp
import jax.scipy
from jax import grad, jit
from jax import random as rd
from jax.scipy import special as sfn
from jax.scipy.stats import norm

key = rd.PRNGKey(42069)

# from scipy.stats import norm
```

```{python}
def dFac(r, dt):
    """Returns the sum of e^(r*dt)"""
    return jnp.exp(-r * dt)
```

```{python}
S = 100.0
K = 110.0
r = 0.040
sigma = 0.18
T = 30 / 365
```

```{python}
def BlackMC(S, K, r, sigma, T):
    Z = rd.normal(key, shape=(1_000_000,))
    W_T = jnp.sqrt(T) * Z
    prices = S * jnp.exp((r - 0.5 * jnp.square(sigma)) * T + sigma * W_T)
    payoffs = jnp.maximum(
        prices - K, 0
    )  # or use torch.max(prices - K, torch.zeros(1_000_000))
    return jnp.mean(payoffs) * jnp.exp(-r * T)
```

```{python}
print(BlackMC(S, K, r, sigma, T))
```

```{python}
value = BlackMC(S, K, r, sigma, T)

DeltaMC, RhoMC, VegaMC, mThetaMC = [jax.grad(BlackMC, argnums = x) for x in [0, 2, 3, 4]]
GammaMC =

print(f"Value: {value}\nDelta: {DeltaMC(S, K, r, sigma, T)}\nRho {RhoMC(S, K, r, sigma, T)}\nVega {VegaMC(S, K, r, sigma, T)}\nmTheta {mThetaMC(S, K, r, sigma, T)}")
```

