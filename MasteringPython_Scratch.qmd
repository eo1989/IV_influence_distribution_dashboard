---
jupyter:
  jupytext:
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.16.6
  kernelspec:
    display_name: IV Dist Dash
    language: python
    name: iv_dist_dash
---

```{python}
some_var = 123
```

```{python}
match some_var:
    case 1:
        print("Got 1")
    case other:
        print("Got something else: ", other)
```

```{python}
class Direction:
    LEFT = -1
    RIGHT = 1
```

```{python}
some_var = Direction.LEFT
```

```{python}
match some_var:
    case Direction.LEFT:
        print("Going left")
    case Direction.RIGHT:
        print("Going right")
```

As long as this cant be interpreted as a variable name, this will work. When comparing with a local variable, an `if` statement can always be used as well.

```{python}
# value = 0
match value:
    case negative if negative < 0:
        print(f"{negative} is smaller than 0")
    case positive if positive > 0:
        print(f"{positive} is greater than 0")
    case _:
        print("no match")
```

Without a `value` variable decalred before the `if` it will not work.
This will not work: `case if ...`

#### Matching lists, tuples, & other sequences

```{python}
vals = (0, 1), (0, 2), (0, 3)

for value in vals:
    print("matching", value, end=": ")
    match value:
        case 0, 1:
            print("exactly matched 0, 1")
        case 0, y:
            print(f"matched 0, y with y: {y}")
        case x, y:
            print(f"matched x, y with x, y: {x}, {y}")
```

The first case explicitly matches both of the given values, which is identical to `if value == (0, 1):`.
The second case explicitly matches 0 for the first value, but leaves the second value as a variable and stores it in `y`. Effectively this comes down to `if value[0] == 0: y == value[1]`.
The last case stores a variable for both the `x` and `y` values and whill match any sequence with exactly two items.

#### Matching sequence patterns:

```{python}
for value in vals:
    print("matching", value, end=": ")
    match value:
        case 0 as x, (1 | 2) as y:
            print(f"matched x, y with x, y: {x}, {y}")
        case _:
            print("no match")
```

